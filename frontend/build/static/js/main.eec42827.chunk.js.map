{"version":3,"sources":["styles/css/App.module.css","components/MyNavBar.js","components/Hero.js","components/ExampleButton.js","components/ExampleWrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","header","section","work","heroContainer","heroText","link","App-link","navbar","bg-transparent","appName","MyNavBar","state","isTop","_this2","this","document","addEventListener","window","scrollY","setState","react_default","a","createElement","Fragment","Navbar_default","varient","bg","sticky","Brand","href","className","go","Component","Hero","styles","ExampleButton","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Button_default","onClick","toggle","variant","ExampleWrapper","_this","isToggleOn","handleClick","bind","assertThisInitialized","fetch","concat","url","mode","then","response","json","console","log","JSON","stringify","components_ExampleButton","React","App","black","components_MyNavBar","components_Hero","Jumbotron_default","Container_default","App_header","components_ExampleWrapper","libre","target","rel","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,OAAA,oBAAAC,QAAA,qBAAAC,KAAA,kBAAAC,cAAA,2BAAAC,SAAA,sBAAAC,KAAA,kBAAAC,WAAA,sBAAAC,OAAA,oBAAAC,iBAAA,4BAAAC,QAAA,gPCyCHC,6MAnCbC,MAAQ,CACNC,OAAO,sFAGW,IAAAC,EAAAC,KAClBC,SAASC,iBAAiB,SAAU,WAClC,IAAMJ,EAAQK,OAAOC,QAAU,GAC3BN,IAAUC,EAAKF,MAAMC,OACvBC,EAAKM,SAAS,CAAEP,6CAQpB,OACEQ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,QAAQ,OACRC,GAAIZ,KAAKH,MAAMC,MAAQ,OAAS,cAChCe,OAAO,OAEPP,EAAAC,EAAAC,cAACE,EAAAH,EAAOO,MAAR,CAAcC,KAAK,SACjBT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WACbV,EAAAC,EAAAC,cAACS,EAAA,EAAD,MACC,uBA3BQC,aCQRC,mLARX,OACEb,EAAAC,EAAAC,cAAA,OAAKQ,UAAWI,IAAO/B,eACrBiB,EAAAC,EAAAC,cAAA,KAAGQ,UAAWI,IAAO9B,UAArB,uCAJW4B,sCCgBJG,cAdb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,GAAAE,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3B,KACZsB,0EAKN,OACEhB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAQsB,QAAS7B,KAAKsB,MAAMQ,OAAQC,QAAQ,WAA5C,kBARsBb,aCkCbc,cAlCb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAV,OAAAC,EAAA,EAAAD,CAAAvB,KAAAgC,IACjBC,EAAAV,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAS,GAAAL,KAAA3B,KAAMsB,KACDzB,MAAQ,CAAEqC,YAAY,GAG3BD,EAAKE,YAAcF,EAAKE,YAAYC,KAAjBb,OAAAc,EAAA,EAAAd,CAAAU,IALFA,6EAUL,IAAAlC,EAAAC,KACZsC,MAAK,UAAAC,OAAWvC,KAAKsB,MAAMkB,KAAO,CAAEC,KAAM,SACvCC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAEJE,QAAQC,IAAIC,KAAKC,UAAUL,IAG3B5C,EAAKM,SAAS,SAAAR,GAAK,MAAK,CACtBqC,YAAarC,EAAMqC,iDAMzB,OACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,CAAenB,OAAQ9B,KAAKmC,cAC5B7B,EAAAC,EAAAC,cAAA,aAAKR,KAAKH,MAAMqC,WAAa,KAAO,MAApC,aA7BqBgB,IAAMhC,6CCwDpBiC,mLA7CX,OADAN,QAAQC,IAAI1B,IAAOgC,OAEjB9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,4DAEED,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,kCAEED,EAAAC,EAAAC,cAAA,OAAKQ,UAAWI,IAAO+B,KACrB7C,EAAAC,EAAAC,cAAA,UAAQQ,UAAWI,IAAOqC,YACxBnD,EAAAC,EAAAC,cAACkD,EAAD,CAAgBlB,IAAI,mBACpBlC,EAAAC,EAAAC,cAAA,MAAIQ,UAAWI,IAAOlC,QAAtB,8BACAoB,EAAAC,EAAAC,cAAA,MAAIQ,UAAWI,IAAOjC,SAAtB,kBACAmB,EAAAC,EAAAC,cAAA,KAAGQ,UAAWI,IAAOhC,MAArB,6FAIAkB,EAAAC,EAAAC,cAAA,KAAGQ,UAAWI,IAAOjC,SAArB,0EAIAmB,EAAAC,EAAAC,cAAA,KAAGQ,UAAWI,IAAOuC,OAArB,uGAEuCrD,EAAAC,EAAAC,cAACS,EAAA,EAAD,OAEvCX,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEQ,UAAWI,IAAO7B,KAClBwB,KAAK,sBACL6C,OAAO,SACPC,IAAI,uBAJN,2BA/BE3C,aCAE4C,QACW,cAA7B3D,OAAO4D,SAASC,UAEe,UAA7B7D,OAAO4D,SAASC,UAEhB7D,OAAO4D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASnE,SAASoE,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.eec42827.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__12VhZ\",\"section\":\"App_section__1oKat\",\"work\":\"App_work__2jk6U\",\"heroContainer\":\"App_heroContainer__3DVgt\",\"heroText\":\"App_heroText__1W44_\",\"link\":\"App_link__eGSz0\",\"App-link\":\"App_App-link__3Ws-_\",\"navbar\":\"App_navbar__1sdTu\",\"bg-transparent\":\"App_bg-transparent__31vXi\",\"appName\":\"App_appName__1vZdW\"};","import React, { Component } from \"react\";\n// import styles from \"../styles/css/App.module.css\";\nimport { GoFlame } from \"react-icons/go\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\n/* Example Navbar that we can customize */\nclass MyNavBar extends Component {\n  state = {\n    isTop: true\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"scroll\", () => {\n      const isTop = window.scrollY < 80;\n      if (isTop !== this.state.isTop) {\n        this.setState({ isTop });\n      }\n    });\n  }\n\n  // NOTE transparent is not a builtin - instead I make my own background class\n  // called bg-transparent - all bg=\"\" does it set a class name to bg-\"\"\n  render() {\n    return (\n      <>\n        <Navbar\n          varient=\"dark\"\n          bg={this.state.isTop ? \"dark\" : \"transparent\"}\n          sticky=\"top\"\n        >\n          <Navbar.Brand href=\"#home\">\n            <div className=\"appName\">\n              <GoFlame />\n              {\" App Name\"}\n            </div>\n          </Navbar.Brand>\n        </Navbar>\n      </>\n    );\n  }\n}\n\nexport default MyNavBar;\n","import React, { Component } from \"react\";\nimport styles from \"../styles/css/App.module.css\";\n\n/* Example Hero that we can customize */\nclass Hero extends Component {\n  render() {\n    return (\n      <div className={styles.heroContainer}>\n        <p className={styles.heroText}>This is where the hero goes</p>\n      </div>\n    );\n  }\n}\n\nexport default Hero;\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport styles from \"../styles/css/App.module.css\";\n\n/* Example Hero that we can customize */\nclass ExampleButton extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  // toggle came from the upper level component - it is still bound to it\n  render() {\n    return (\n      <Button onClick={this.props.toggle} variant=\"primary\">\n        Primary\n      </Button>\n    );\n  }\n}\n\nexport default ExampleButton;\n","import React, { Component } from \"react\";\nimport styles from \"../styles/css/App.module.css\";\nimport ExampleButton from \"./ExampleButton\";\n\nclass ExampleWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: true };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  // This is the function we will pass to a child component that is still bound to\n  // us -> it will let that component modify something up here!\n  handleClick() {\n    fetch(`http://${this.props.url}`, { mode: \"cors\" })\n      .then(response => response.json())\n      .then(response => {\n        // We have the JSON response here!\n        console.log(JSON.stringify(response));\n\n        // We trigger the wrapper function here!!!\n        this.setState(state => ({\n          isToggleOn: !state.isToggleOn\n        }));\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <ExampleButton toggle={this.handleClick} />\n        <p> {this.state.isToggleOn ? \"ON\" : \"OFF\"} </p>\n      </div>\n    );\n  }\n}\n\nexport default ExampleWrapper;\n","import React, { Component } from \"react\";\n// React won't pickup the css modules without the name \".module.css\"\n// - this is useful cuz we can use autocomplete now by using this\nimport styles from \"./styles/css/App.module.css\";\nimport MyNavBar from \"./components/MyNavBar\";\nimport Hero from \"./components/Hero\";\nimport ExampleWrapper from \"./components/ExampleWrapper\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nimport { GoFlame } from \"react-icons/go\";\n\nclass App extends Component {\n  render() {\n    console.log(styles.black);\n    return (\n      <div>\n        <MyNavBar />\n        <Hero />\n        <Jumbotron>\n          Here is a big jumbotron, with a container underneath\n          <Container>\n            Now I am in the container!\n            <div className={styles.App}>\n              <header className={styles.App_header}>\n                <ExampleWrapper url=\"localhost:8888\" />\n                <h2 className={styles.header}>Header Content With Futura</h2>\n                <h5 className={styles.section}>Section Header</h5>\n                <p className={styles.work}>\n                  This is content written with the work sans font. The brown fox\n                  jumped over the large lake\n                </p>\n                <p className={styles.section}>\n                  MENU written with the Futura. The brown fox jumped over the\n                  large lake\n                </p>\n                <p className={styles.libre}>\n                  CAPS This is content written with the libre franklin font. The\n                  brown fox jumped over the large lake <GoFlame />\n                </p>\n                <p>\n                  Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a\n                  className={styles.link}\n                  href=\"https://reactjs.org\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Learn React\n                </a>\n              </header>\n            </div>\n          </Container>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}